<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.microservice.showcase</groupId>
	<artifactId>parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.2.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<docker.registry>index.docker.io</docker.registry><!-- docker.registry的IP和端口 -->
		<docker.registry.name>meidi</docker.registry.name><!-- docker.registry的repo名字 -->
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Dalston.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<repositories>
		<repository>
			<id>mavencentral</id>
			<name>Maven Central</name>
			<url>https://repo1.maven.org/maven2/</url>
			<layout>default</layout>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/libs-snapshot-local</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone-local</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/libs-release-local</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/libs-snapshot-local</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone-local</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<modules>
		<module>common-microservice-eureka</module>
		<module>common-microservice-config</module>
		<module>common-microservice-config-client</module>
		<module>common-microservice-eureka-client</module>
		<module>common-microservice-hystrix</module>
		<module>common-microservice-hystrix-client</module>
		<module>common-microservice-ribbon</module>
		<module>common-microservice-feign</module>
		<module>common-microservice-fuul</module>
		<module>common-microservice-ribbon-eureka</module>
		<module>common-microservice-springboot-ui</module>
		<module>common-microservice-turbine</module> 
		<module>common-microservice-sleuth</module>
		<!-- <module>common-microservice-docker</module> -->
	</modules>

	<profiles>
		<profile>
			<id>run</id>
			<properties>
				<microservice.config.git.repo>https://github.com/meidi/microservice-config.git</microservice.config.git.repo> 
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>online</id>
			<properties>
				<microservice.config.git.repo>https://github.com/meidi/microservice-config.git</microservice.config.git.repo> 
			</properties>
		</profile>
	</profiles>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 如果将微服务放在docker容器内，以下是使用maven打包docker 镜像的配置 start -->
			<plugin>
				<!-- docker 打包maven插件的名称 groupId 和 artifactId -->
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<!-- docker 打包配置 -->
				<configuration>
					<!-- docker 创建镜像的名称 docker.registry是docker registry的IP， docker.registry.name 
						是在 docker registr 创建的repository 名称 project.artifactId 项目名称 project.version 
						版本 -->
					<imageName>${docker.registry}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
					<!-- dockerfile 的存放路径 -->
					<dockerDirectory>src/main/docker</dockerDirectory>
					<!-- docker 远程服务的ip和端口 (注：如果本机没有安装docker环境，可以使用远程已经安装并启动了dockerd服务来打包docker镜像) -->
					<dockerHost>http://127.0.0.1:2375</dockerHost>
					<!-- dockerCertPath 是在本地windows环境下安装docker环境相打包需要的安全认证 -->
					<!-- <dockerCertPath>C:\Users\Administrator\.docker\machine\machines\myharbor</dockerCertPath> -->
					<!-- 创建完docker image 后是否 push 到docker register，也可以在maven命令中用 -DpushImage 
						来替代 -->
					<pushImage>true</pushImage>
					<!-- docker resources 指定微服务jar的路径，将微服务的jar包部署到docker容器镜像中 -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!-- docker 镜像的配置，serverId 和setting.xml 中的 server id 匹配(因为docker registry的登录名和密码比较敏感，因此配置在setting.xml中) -->
					<serverId>docker-hub</serverId>
					<registryUrl>https://index.docker.io/v1/</registryUrl>
					<!-- <serverId>harbor-docker-register</serverId> <registryUrl>${docker.registry}</registryUrl> -->
				</configuration>
			</plugin>
			<!-- 如果将微服务放在docker容器内，以下是使用maven打包docker 镜像的配置 end -->

		</plugins>
	</build>
</project>